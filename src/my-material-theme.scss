// Following advice at https://material.angular.io/guide/theming#defining-a-custom-theme
// to customize colors, e.g., instead of purple and green from putting this into styles.css:
// @import '@angular/material/prebuilt-themes/purple-green.css';
// ...make use of this file to change out the primary/accent to purple/grey for best use
// in setting the colors for the mat-slider component to fit with the rest of our
// application theming as set by color choices in _variables.scss and elsewhere.
//
// This file becomes the .css included in style.scss instead of purple-green.cvss via:
// node-sass src/my-material-theme.scss my-thmda-material-theme.css
@import "node_modules/@angular/material/_theming.scss"; // NOTE: this update from @import '~@angular/material/theming' noted in https://github.com/angular/components/issues/4038

// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$candy-app-primary: mat-palette($mat-purple);
$candy-app-accent:  mat-palette($mat-grey, A200, A100, A400);

// The warn palette is optional (defaults to red).
$candy-app-warn:    mat-palette($mat-red);

// Create the theme object (a Sass map containing all of the palettes).
$candy-app-theme: mat-light-theme($candy-app-primary, $candy-app-accent, $candy-app-warn);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($candy-app-theme);
